# Copyright [2013] [Fraunhofer-Gesellschaft]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# @author Jose Angel Carvajal Soto
# @since       1.3.1


###########################################################################
#                            SECTION                                      #
#                       Agent configuration                               #
#                                                                         #
###########################################################################

    # ID of the agent. If is * it will generate an UUID. The ID is used by the agent to generate the topics where the agent will send (or receive) control messages.
        agent.id = *
    # This property (a list) indicates if there is any extension to be booted by the core.
        agent.init.extensions = eu.linksmart.services.event.ceml.core.CEML


# Statement API conf:
#
## This set properties define the broker and topic configuration where the statements will arrived and where the notifications will be sent.
#

    ## Enable the MQTT Statement API. If true the agent is able to receive requests addressing Statements, false otherwise.
        api.statements.mqtt.enable = true
    ## Broker configuration
        api.statements.mqtt.broker = control
    ## This topic will be use to publish the feedback when a application sends a statement
        api.statements.mqtt.topic.base = statement/
    ## Topic for add new statements are coming
        api.statements.mqtt.topic.base.add = add/
    ## Topic for create new statements are coming
        api.statements.mqtt.topic.base.create = new/
    ## Topic for add new statements are coming
        api.statements.mqtt.topic.base.update = update/
    ## Topic for add new statements are coming
        api.statements.mqtt.topic.base.remove = delete/

    ## Topic for output errors cannot be traced to an statement but made by one
        api.statements.mqtt.topic.base.errors = errors/
 	## Topic for output will, in case the connection is permanently lost
         api.statements.mqtt.topic.base.will = will/
     ## Output will message, in case the connection is permanently lost
         api.statements.mqtt.message.base.will = connection to agent id: <id> is lost

# Incoming Event API conf:
#
## This set properties define the broker and topic configuration where the events will arrived.
#
    ## Broker configuration
        api.events.mqtt.broker.incoming = incoming
    ## Currently not in use
         api.events.mqtt.topic.incoming.base = /incoming/
    ## The topic where the incoming events arrive. (they must in number with the classes and aliases properties below)
        api.events.mqtt.topics.incoming = /incoming/#, offline/#, SMTLine/#
    ## Mapping of event topics to an type and alias (they match with the values above)
        connector.observers.payload.type.classes = eu.almanac.ogc.sensorthing.api.datamodel.Observation, eu.linksmart.services.payloads.SenML.Event, eu.linksmart.services.payloads.SenML.Event
        connector.observers.type.aliases = Observation, SenML, SenML

# Outgoing EVENT API conf:
#
## This set properties define the brokers and topic (in all brokers) configuration where the compounded or "complex" events will be published.
## This brokers are known as "instances". Additional instances can be added in run-time using DFM statements.
## Notice that all attributes matches in the number of values, and this must be always the case.
## The values are match numerically, this means the first of one list correlate with the first of the other.
## Finally, the EVENT_OUT_TOPIC is mapped to all brokers.
#
    ## Output topic for the compounded or "complex" events
         api.events.mqtt.topic.outgoing = /outgoing/

    ## If this property is true the in case an compound event result is collection/map, the agent will send the event (if possible) in a single message.
    ## If it set false, each value of the collection/map will be send in individual separate messages.
        handler.events.output.aggregation = true
#
## Logging and monitoring features of the Agents conf:
#
    ## indicates how often a "alive" message is sent to the broker
        core.monitoring.heartbeat.every.milliseconds = 30000
    ## indicates how often a "process" message is reported in the log
        feeder.monitoring.report.every = 20
#
## CEP engine related  conf:
#

    # Indicates which package must be loaded in the CEP engines (CEPWrappers)
        cep.init.additionalImportPackage = eu.almanac.event.cep.esper.utils.Tools, java.util.UUID, eu.linksmart.services.payloads.SenML.Event

    # externalClock property is true, the CEP engine clock will be based on the timestamps of the events and not on the system clock.
    # If this property is set true, the staringTime must be defile
        cep.simulation.externalClock = false
    # (See externalClock) In case externalClock is set true, this property indicates the stating time of the CEP engine clock.
        cep.simulation.staringTime = 2009-08-24T00:00:00.00Z

    ## Indicates witch CEP engine will be loaded
        cep.init.engines = eu.almanac.event.cep.esper.EsperEngine

    ## Indicate the files that contains the events and/or statement to be bootstrapped in the CEP engines
        cep.init.bootstrapping  =
# bootstrapping.json

###########################################################################
#                            SECTION                                      #
##                CEML configuration section                              #
#                                                                         #
###########################################################################
        ceml.api.mqtt.broker = ceml
        ceml.api.mqtt.topic.input =  ceml/
        ceml.api.mqtt.topic.output = ceml/output/
        ceml.api.mqtt.topic.error = ceml/error/
        ceml.monitoring.evaluation.generateReports = true

###########################################################################
#                            SECTION                                      #
##                General Configuration (GC Utils Conf)                   #
#                                                                         #
###########################################################################

    # this property doesn't work at the moment
        LOGGER_LOG_ONLINE_ENABLED = false
        logging.default.configuration.file =  conf.cfg
        general.time.timestamp.format = yyyy-MM-dd'T'HH:mm:ss.S'Z'
        general.time.zone = Europe/Berlin
        general.time.epoch = false

###########################################################################
#                            SECTION                                      #
##                Spring-boot-Jetty configuration section                 #
#                                                                         #
###########################################################################
    # spring-boot configuration. more in http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

    # port of the tomcat embedded server
        server.port = 8319
        #server.ssl.key-store = Keystore
        #server.ssl.key-store-password =
        #server.ssl.client-auth= NEED
        #server.ssl.trust-store=Truststore
        #server.ssl.trust-store-password =
        
###########################################################################
#                          GC SECTION                                     #
##                  broker(s) default configuration                      ##
#                                                                         #
###########################################################################

    #
    # The following properties define the default properties of all brokers defined in the system
    # In other words, if there is no specific configuration for any of this properties;
    # the value set here will be use. (see non-default broker(s) configuration section)
    #

        connection.brokers.service.connection.multiple = false
        connection.broker.mqtt.hostname = localhost
        connection.broker.mqtt.port = 1883
        connection.broker.mqtt.security.port = 8883
        connection.broker.mqtt.enableFileConnectionPersistency = false
        connection.broker.mqtt.timeOut = 60000
        connection.broker.mqtt.noReconnectTry = 10
        connection.broker.mqtt.reconnectWaitingTime = 60000
        connection.broker.mqtt.keepAlive = 60000

        messaging.client.mqtt.enableRetainPolicy = false
        messaging.client.mqtt.sub.qos = 2
        messaging.client.mqtt.pub.qos = 2

        # DEFAULT (try 3.1.1,otherwise 3.1), V3_1 (3.1), V3_1_1 (3.1.1)
        messaging.client.mqtt.version = DEFAULT
        messaging.client.mqtt.maxInFlightMessages = 10
        messaging.client.mqtt.automaticReconnect = true
         messaging.client.mqtt.session.clean.enabled = true

###########################################################################
#                            GC SUBSECTION                                #
#                broker(s) security default configuration                 #
#                                                                         #
###########################################################################
        connection.broker.mqtt.security.certificateBaseSecurityEnabled = false
        connection.broker.mqtt.security.caCertificatePath =
        connection.broker.mqtt.security.caCertificatePassword =
        connection.broker.mqtt.security.certificatePath =
        connection.broker.mqtt.security.certificatePassword =
        connection.broker.mqtt.security.keyPath =
        connection.broker.mqtt.security.keyPassword =

###########################################################################
#                         GC SUBSECTION                                   #
#                  non-default broker(s) configuration                    #
#                                                                         #
###########################################################################
    #
    ## definition of brokers (by default will take the values of the default broker configuration
    #
        connection.brokers.aliases = control, incoming, outgoing, fit, ismb, alexandra, amiat, trn, smat, ceml

    #
    # Add here configuration that differs from the default configuration.
    # The configuration property stays the same, just add the alias of the broker as postfix.
    # Below we can see an example that change the default "hostname" of the broker with alias "control"
    # e.g.
        #connection.broker.mqtt.hostname.control = almanac-broker

        connection.broker.mqtt.hostname.fit = almanac.fit.fraunhofer.de
        connection.broker.mqtt.hostname.amiat = almanac.fit.fraunhofer.de
        connection.broker.mqtt.hostname.ismb = almanac-showcase.ismb.it
        connection.broker.mqtt.hostname.trn = almanac-showcase.ismb.it
        connection.broker.mqtt.hostname.alexandra = almanac.alexandra.dk
        connection.broker.mqtt.hostname.smat = almanac.alexandra.dk



###########################################################################
#                            GC SECTION                                   #
##                Debugging core configuration Log4j conf.                #
#                                                                         #
###########################################################################
    # Root logger option
        log4j.rootLogger=INFO, file, stdout
    # Direct log messages to a log file
        log4j.appender.file=org.apache.log4j.RollingFileAppender
        log4j.appender.file.File= logging.log
        log4j.appender.file.MaxFileSize=10MB
        log4j.appender.file.MaxBackupIndex=10
        log4j.appender.file.layout=org.apache.log4j.PatternLayout
        log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

    # Direct log messages to stdout
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.Target=System.out
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
###########################################################################
#                         GC SUBSECTION                                   #
#                 Test and validation configuration                       #
#                                                                         #
###########################################################################

#  test.validation.lot.size = 10000
#  test.validation.message.forwarding.enabled
#  test.validation.mqtt.observers.enabled
# test.validation.message.deliverer





